// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AccessPointSpec defines the desired state of AccessPoint.
//
// An access point used to access a bucket.
type AccessPointSpec struct {

	// The Amazon Web Services account ID for the account that owns the specified
	// access point.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountID"`
	// The name of the bucket that you want to associate this access point with.
	//
	// For using this parameter with Amazon S3 on Outposts with the REST API, you
	// must specify the name and the x-amz-outpost-id as well.
	//
	// For using this parameter with S3 on Outposts with the Amazon Web Services
	// SDK and CLI, you must specify the ARN of the bucket accessed in the format
	// arn:aws:s3-outposts:::outpost//bucket/. For example, to access the bucket
	// reports through Outpost my-outpost owned by account 123456789012 in Region
	// us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports.
	// The value must be URL encoded.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket"`
	// The Amazon Web Services account ID associated with the S3 bucket associated
	// with this access point.
	//
	// For same account access point when your bucket and access point belong to
	// the same account owner, the BucketAccountId is not required. For cross-account
	// access point when your bucket and access point are not in the same account,
	// the BucketAccountId is required.
	BucketAccountID *string `json:"bucketAccountID,omitempty"`
	// The name you want to assign to this access point.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The PublicAccessBlock configuration that you want to apply to the access
	// point.
	PublicAccessBlockConfiguration *PublicAccessBlockConfiguration `json:"publicAccessBlockConfiguration,omitempty"`
	// If you include this field, Amazon S3 restricts access to this access point
	// to requests from the specified virtual private cloud (VPC).
	//
	// This is required for creating an access point for Amazon S3 on Outposts buckets.
	VPCConfiguration *VPCConfiguration `json:"vpcConfiguration,omitempty"`
}

// AccessPointStatus defines the observed state of AccessPoint
type AccessPointStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The name or alias of the access point.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty"`
}

// AccessPoint is the Schema for the AccessPoints API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type AccessPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessPointSpec   `json:"spec,omitempty"`
	Status            AccessPointStatus `json:"status,omitempty"`
}

// AccessPointList contains a list of AccessPoint
// +kubebuilder:object:root=true
type AccessPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessPoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AccessPoint{}, &AccessPointList{})
}
